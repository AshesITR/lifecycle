% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/signal.R
\name{signal_soft_deprecated}
\alias{signal_soft_deprecated}
\alias{warn_deprecated}
\alias{stop_defunct}
\title{Signal deprecation}
\usage{
signal_soft_deprecated(when, what, with = NULL, details = NULL,
  id = NULL, env = caller_env(2))

warn_deprecated(when, what, with = NULL, details = NULL, id = NULL)

stop_defunct(when, what, with = NULL, details = NULL)
}
\arguments{
\item{when}{The version the feature was deprecated in.}

\item{what}{If the deprecated feature is a whole function, the
function name: \code{"foo()"}. If it's an argument that is being
deprecated, the function call should include the argument:
\code{"foo(arg = )"}.

You can optionally supply the namespace: \code{"ns::foo()"}. If you
don't, it is inferred from the caller environment.}

\item{with}{A replacement for the deprecated feature. This should
be a string of the same form as \code{what}.}

\item{details}{The deprecation message is generated from \code{when},
\code{what}, and \code{with}. You can additionally supply a string
\code{details} to be appended to the message.}

\item{id}{The id of the deprecation. A warning is issued only once
for each \code{id}. Defaults to \code{msg}, but you should give a unique ID
when the message is built programmatically and depends on inputs.}

\item{env}{The environment in which the soft-deprecated function
was called. A warning is issued if called from the global
environment. If testthat is running, a warning is also called if
the retired function was called from the package being tested.}
}
\description{
These functions provide three levels of verbosity for deprecated
functions.
\itemize{
\item \code{signal_soft_deprecated()} warns only if called from the global
environment (so the user can change their script) or from the
package currently being tested (so the package developer can fix
the package).
\item \code{warn_deprecated()} warns unconditionally.
\item \code{stop_defunct()} fails unconditionally.
}

Warnings are only issued once per session to avoid overwhelming the
user with repeated warnings.
}
\section{Controlling verbosity}{


The verbosity of retirement warnings can be controlled with global
options. You'll generally want to set these options locally with
one of these helpers:
\itemize{
\item \code{with_lifecycle_silence()} disables all soft-deprecation and
deprecation warnings.
\item \code{with_lifecycle_warnings()} enforces warnings for both
soft-deprecated and deprecated functions. The warnings are
repeated rather than signalled once per session.
\item \code{with_lifecycle_errors()} enforces errors for both
soft-deprecated and deprecated functions.
}

All the \code{with_} helpers have \code{scoped_} variants that are
particularly useful in testthat blocks.
}

\examples{
# A deprecated function `foo`:
warn_deprecated("1.0.0", "foo()")

# A deprecated argument `arg`:
warn_deprecated("1.0.0", "foo(arg = )")

# A deprecated function with a function replacement:
warn_deprecated("1.0.0", "foo()", "bar()")

# A deprecated function with a function replacement from a
# different package:
warn_deprecated("1.0.0", "foo()", "otherpackage::bar()")

# A deprecated function with an argument replacement:
warn_deprecated("1.0.0", "foo()", "foo(bar = )")

}
\seealso{
\code{\link[=lifecycle]{lifecycle()}}
}
