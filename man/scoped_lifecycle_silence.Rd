% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/verbosity.R
\name{scoped_lifecycle_silence}
\alias{scoped_lifecycle_silence}
\alias{with_lifecycle_silence}
\alias{scoped_lifecycle_warnings}
\alias{with_lifecycle_warnings}
\alias{scoped_lifecycle_errors}
\alias{with_lifecycle_errors}
\title{Control the verbosity of deprecation signals}
\usage{
scoped_lifecycle_silence(frame = caller_env())

with_lifecycle_silence(expr)

scoped_lifecycle_warnings(frame = caller_env())

with_lifecycle_warnings(expr)

scoped_lifecycle_errors(frame = caller_env())

with_lifecycle_errors(expr)
}
\arguments{
\item{frame}{For \code{scoped_} functions, the frame environment whose
lifetime determines the duration of the verbosity settings.}

\item{expr}{For \code{with_} functions, an expression to evaluate with
the verbosity settings.}
}
\description{
There are 3 levels of verbosity for deprecated functions: silence,
warning, and error. Since the lifecycle package avoids disruptive
warnings, the default level of verbosity depends on the lifecycle
stage of the deprecated function, on the context of the caller
(global environment or testthat unit tests cause more warnings),
and whether the warning was already issued (see the help for
\link[=deprecate_soft]{deprecation functions}).

You can control the level of verbosity with the global option
\code{lifecycle_verbosity}. It can be set to:
\itemize{
\item \code{"default"} or \code{NULL} for the default non-disruptive settings.
\item \code{"quiet"}, \code{"warning"} or \code{"error"} to force silence, warnings or
errors for deprecated functions.
}

Note that functions calling \code{\link[=deprecate_stop]{deprecate_stop()}} invariably throw
errors.

You'll generally want to set these options locally with one of
these helpers:
\itemize{
\item \code{with_lifecycle_silence()}
\item \code{with_lifecycle_warnings()}
\item \code{with_lifecycle_errors()} enforces errors for both
soft-deprecated and deprecated functions.
}

All the \code{with_} helpers have \code{scoped_} variants that are
particularly useful in testthat blocks. Whereas \code{with_} helpers
enforce a verbosity level during the evaluation of an expression,
\code{scoped_} helpers enforce a verbosity level for the duration of the
enclosing scope.
}
\examples{
if (rlang::is_installed("testthat")) {
  library(testthat)

  mytool <- function() {
    deprecate_soft("1.0.0", "mytool()")
    10 * 10
  }

  # Forcing the verbosity level is useful for unit testing. You can
  # force errors to test that the function is indeed deprecated:
  test_that("mytool is deprecated", {
    scoped_lifecycle_errors()
    expect_error(mytool(), class = "defunctError")
  })

  # Or you can enforce silence to safely test that the function
  # still works:
  test_that("mytool still works", {
    scoped_lifecycle_silence()
    expect_equal(mytool(), 100)
  })
}

}
